swagger: "2.0"
info:
  description: "This is website API that will help you to buy one of 8 products. Also only one User can buy choosen product. Here is tags too! You can add
    then to your notes and sort by them."
  version: "1.1.2"
  title: "ProductMartket"
  contact:
    email: "s.duda021738@gmail.com"
host: "products_store.swagger.io"
tags:
- name: "Product"
  description: "Everything about products"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /product:
    post:
      tags:
      - "Product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "200":
          description: "Succesful operation"
        "405":
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:product"
        - "read:product"
    put:
      tags:
      - "Product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "200":
          description: "Succesful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
      security:
      - productstore_auth:
        - "write:product"
        - "read:product"
  /product/{productId}:
    get:
      tags:
      - "Product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
      security:
      - api_key: []
    delete:
      tags:
      - "Product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Succesful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - productstore_auth:
        - "write:product"
        - "read:product"

  /purchase/order:
    post:
      tags:
      - "purchase"
      summary: "Place an order for a product"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the product"
        required: true
        schema:
          $ref: "#/definitions/Purchase"
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Purchase"
        "400":
          description: "Invalid Order"
  /purchase/order/{orderId}:
    get:
      tags:
      - "purchase"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Purchase"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "purchase"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      security:
      - api_key: []
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      security:
      - api_key: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      security:
      - api_key: []
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      security:
      - api_key: []
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  productstore_auth:
    type: "oauth2"
    authorizationUrl: "http://productstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:product: "modify product in your account"
      read:product: "read your product"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Purchase:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      bought_products:
          type: "array"
          items:
            $ref: '#/definitions/Product'
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "freezed"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
      bought_products:
          type: "array"
          items:
            $ref: '#/definitions/ProductList'
    xml:
      name: "User"
  ProductList:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      all_products:
          type: "array"
          items:
            $ref: '#/definitions/Product'
          maxLength: 8
          description: "max products in the store"
    xml:
      name: "Product"
  Product:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
        description: "product status in the store"
      amount:
        type: "integer"
        format: "int64"
        maxLength: 64
      isbought:
          type: "boolean"
          default: false
    xml:
      name: "Product"